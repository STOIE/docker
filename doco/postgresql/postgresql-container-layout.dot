digraph d {
    // Sell as stay latest stay greatest (supported on LB infrastructure), not supported and you
    // will be put on a single outdated DB, no patching and be .... in the ....;
    // And if you hold records, the blame is on you if they are lost. (No backups!!!)
    label="PostgreSQL Container Layout";

    prodstagpgq [shape=component, label="PGQ"];
    staguatpgq [shape=component, label="PGQ"];
    uatdevpgq [shape=component, label="PGQ"];
    prodstaglondiste [shape=component, label="londiste"];
    staguatlondiste [shape=component, label="londiste"];
    uatdevlondiste [shape=component, label="londiste"];

    subgraph cluster_prod {
        label="Production";
        subgraph cluster_prodappcluster0 {
            label="Production Fee Calc Containers (communicating to DB via sharding)";
            node [shape=component];
            prodappserver00 [label="Fee Calc0\n\nGunicorn\nPostgreSQL\nPL/Proxy"];
            prodappserver01 [label="Fee Calc1\n\nGunicorn\nPostgreSQL\nPL/Proxy"];
            prodappserver02 [label="Fee Calc2\n\nGunicorn\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_prodappcluster1 {
            label="Production Drupal Containers (communicating to DB via sharding)";
            node [shape=component];
            prodappserver10 [label="Drupal0\n\nPHP5-FPM\nPostgreSQL\nPL/Proxy"];
            prodappserver11 [label="Drupal1\n\nPHP5-FPM\nPostgreSQL\nPL/Proxy"];
            prodappserver12 [label="Drupal2\n\nPHP5-FPM\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_prodpgcluster0 {
            label="Production DB Environment";
            node [shape=component];
            prodmaster0 [label="ProductionDB0\n\npgbouncer\nPostgreSQL"];
            prodmaster1 [label="ProductionDB1\n\npgbouncer\nPostgreSQL"];
            prodmaster2 [label="ProductionDB2\n\npgbouncer\nPostgreSQL"];
            prodrepstreaming00 [style="invisible",width=0,height=0,fixedsize=true];
            prodrepstreaming10 [style="invisible",width=0,height=0,fixedsize=true];
            prodrepstreaming20 [style="invisible",width=0,height=0,fixedsize=true];
            prodhot00a [label="HotStandby00a\n\nPostgreSQL\nwalmgr"];
            prodhot10a [label="HotStandby10a\n\nPostgreSQL\nwalmgr"];
            prodhot20a [label="HotStandby20a\n\nPostgreSQL\nwalmgr"];
            prodhot00b [label="HotStandby00b\n\nPostgreSQL\nwalmgr"];
            prodhot10b [label="HotStandby10b\n\nPostgreSQL\nwalmgr"];
            prodhot20b [label="HotStandby20b\n\nPostgreSQL\nwalmgr"];
            prodhotbackend [label="HotStandbyBackend\n\nPostgreSQL\nwalmgr\n\n(using: Cascading Replication)\nRecompiling shards\nThis is where a BU is taken."];

            prodmaster0 -> prodrepstreaming00;
            prodmaster1 -> prodrepstreaming10;
            prodmaster2 -> prodrepstreaming20;
            prodrepstreaming00 -> prodhot00a;
            prodrepstreaming10 -> prodhot10a;
            prodrepstreaming20 -> prodhot20a;
            prodrepstreaming00 -> prodhot00b -> prodhotbackend;
            prodrepstreaming10 -> prodhot10b -> prodhotbackend;
            prodrepstreaming20 -> prodhot20b -> prodhotbackend;

        }

        prodappserver00 -> prodmaster0;
        prodappserver00 -> prodmaster1;
        prodappserver00 -> prodmaster2;
        prodappserver01 -> prodmaster0;
        prodappserver01 -> prodmaster1;
        prodappserver01 -> prodmaster2;
        prodappserver02 -> prodmaster0;
        prodappserver02 -> prodmaster1;
        prodappserver02 -> prodmaster2;

        prodappserver10 -> prodmaster0;
        prodappserver10 -> prodmaster1;
        prodappserver10 -> prodmaster2;
        prodappserver11 -> prodmaster0;
        prodappserver11 -> prodmaster1;
        prodappserver11 -> prodmaster2;
        prodappserver12 -> prodmaster0;
        prodappserver12 -> prodmaster1;
        prodappserver12 -> prodmaster2;

    }

    subgraph cluster_staging {
        label="Staging";
        subgraph cluster_stagappcluster0 {
            label="Staging Fee Calc Containers";
            node [shape=component];
            stagappserver00 [label="Fee Calc0\n\nGunicorn\nPostgreSQL\nPL/Proxy"];
            stagappserver01 [label="Fee Calc1\n\nGunicorn\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_stagappcluster1 {
            label="Staging Drupal Containers";
            node [shape=component];
            stagappserver10 [label="Drupal0\n\nPHP5-FPM\nPostgreSQL\nPL/Proxy"];
            stagappserver11 [label="Drupal1\n\nPHP5-FPM\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_stagfeeder0 {
            label="Staging PGQ Feeder(communicating to DB via sharding)";
            node [shape=component];
            stagfeeder00 [label="PGQ Feeder0\n\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_stagpgcluster0 {
            label="Staging DB Environment";
            node [shape=component];
            stagmaster0 [label="StagingDB0\n\npgbouncer\nPostgreSQL"];
            stagmaster1 [label="StagingDB1\n\npgbouncer\nPostgreSQL"];
            stagrepstreaming00 [style="invisible",width=0,height=0,fixedsize=true];
            stagrepstreaming10 [style="invisible",width=0,height=0,fixedsize=true];
            staghot00a [label="HotStandby00a\n\nPostgreSQL\nwalmgr"];
            staghot10a [label="HotStandby10a\n\nPostgreSQL\nwalmgr"];
            staghot00b [label="HotStandby00b\n\nPostgreSQL\nwalmgr"];
            staghot10b [label="HotStandby10b\n\nPostgreSQL\nwalmgr"];
            staghotbackend [label="HotStandbyBackend\n\nPostgreSQL\nwalmgr\n\n(using: Cascading Replication)\nRecompiling shards\nThis is where a BU is taken."];

            stagmaster0 -> stagrepstreaming00;
            stagmaster1 -> stagrepstreaming10;
            stagrepstreaming00 -> staghot00a;
            stagrepstreaming10 -> staghot10a;
            stagrepstreaming00 -> staghot00b -> staghotbackend;
            stagrepstreaming10 -> staghot10b -> staghotbackend;

        }

        stagfeeder00 -> stagmaster0;
        stagfeeder00 -> stagmaster1;

        stagappserver00 -> stagmaster0;
        stagappserver00 -> stagmaster1;
        stagappserver01 -> stagmaster0;
        stagappserver01 -> stagmaster1;

        stagappserver10 -> stagmaster0;
        stagappserver10 -> stagmaster1;
        stagappserver11 -> stagmaster0;
        stagappserver11 -> stagmaster1;

    }

    subgraph cluster_uat {
        label="UAT";
        subgraph cluster_uatappcluster0 {
            label="UAT Fee Calc Containers";
            node [shape=component];
            uatappserver00 [label="Fee Calc0\n\nGunicorn\npgbouncer\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_uatappcluster1 {
            label="UAT Drupal Containers";
            node [shape=component];
            uatappserver10 [label="Drupal0\n\nPHP5-FPM\npgbouncer\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_uatfeeder0 {
            label="UAT PGQ Feeder(communicating to DB via sharding)";
            node [shape=component];
            uatfeeder00 [label="PGQ Feeder0\n\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_uatpgcluster0 {
            label="UAT DB Environment";
            node [shape=component];
            uatmaster0 [label="UATDB0\n\npgbouncer\nPostgreSQL"];
            uatmaster1 [label="UATDB1\n\npgbouncer\nPostgreSQL"];
            uatrepstreaming00 [style="invisible",width=0,height=0,fixedsize=true];
            uatrepstreaming10 [style="invisible",width=0,height=0,fixedsize=true];
            uathot00a [label="HotStandby00a\n\nPostgreSQL\nwalmgr"];
            uathot10a [label="HotStandby10a\n\nPostgreSQL\nwalmgr"];
            uathot00b [label="HotStandby00b\n\nPostgreSQL\nwalmgr"];
            uathot10b [label="HotStandby10b\n\nPostgreSQL\nwalmgr"];
            uathotbackend [label="HotStandbyBackend\n\nPostgreSQL\nwalmgr\n\n(using: Cascading Replication)\nRecompiling shards\nThis is where a BU is taken."];

            uatmaster0 -> uatrepstreaming00;
            uatmaster1 -> uatrepstreaming10;
            uatrepstreaming00 -> uathot00a;
            uatrepstreaming10 -> uathot10a;
            uatrepstreaming00 -> uathot00b -> uathotbackend;
            uatrepstreaming10 -> uathot10b -> uathotbackend;

        }

        uatfeeder00 -> uatmaster0;
        uatfeeder00 -> uatmaster1;

        uatappserver00 -> uatmaster0;
        uatappserver00 -> uatmaster1;

        uatappserver10 -> uatmaster0;
        uatappserver10 -> uatmaster1;

    }

    subgraph cluster_dev {
        label="Development";
        subgraph cluster_devappcluster0 {
            label="Development Fee Calc Containers";
            node [shape=component];
            devappserver00 [label="Fee Calc0\n\nGunicorn\npgbouncer\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_devappcluster1 {
            label="Development Drupal Containers";
            node [shape=component];
            devappserver10 [label="Drupal0\n\nPHP5-FPM\npgbouncer\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_devfeeder0 {
            label="Dev PGQ Feeder(communicating to DB via sharding)";
            node [shape=component];
            devfeeder00 [label="PGQ Feeder0\n\nPostgreSQL\nPL/Proxy"];
        }
        subgraph cluster_devpgcluster0 {
            label="Development DB Environment";
            node [shape=component];
            devmaster0 [label="DevelopmentDB0\n\npgbouncer\nPostgreSQL"];
            devmaster1 [label="DevelopmentDB1\n\npgbouncer\nPostgreSQL"];
            devhot00a [label="HotStandby00a\n\nPostgreSQL\nwalmgr"];
            devhot10a [label="HotStandby10a\n\nPostgreSQL\nwalmgr"];
            devhotbackend [label="HotStandbyBackend\n\nPostgreSQL\nwalmgr\n\n(using: Cascading Replication)\nRecompiling shards\nThis is where a BU is taken."];

            devmaster0 -> devhot00a -> devhotbackend;
            devmaster1 -> devhot10a -> devhotbackend;

        }

        devfeeder00 -> devmaster0;
        devfeeder00 -> devmaster1;

        devappserver00 -> devmaster0;
        devappserver00 -> devmaster1;

        devappserver10 -> devmaster0;
        devappserver10 -> devmaster1;

    }

    prodhotbackend -> prodstagpgq -> stagfeeder00;
    staghotbackend -> staguatpgq -> uatfeeder00;
    uathotbackend -> uatdevpgq -> devfeeder00;

    prodhotbackend -> prodstaglondiste -> stagfeeder00 [dir="both"];
    staghotbackend -> staguatlondiste -> uatfeeder00 [dir="both"];
    uathotbackend -> uatdevlondiste -> devfeeder00 [dir="both"];

}
